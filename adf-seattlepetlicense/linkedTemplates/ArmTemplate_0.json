{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-seattlepetlicense"
		},
		"ls_azureblobstorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://storagedamg7370.blob.core.windows.net/"
		},
		"ls_azureblobstorage_sas_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'ls_azureblobstorage_sas'"
		},
		"ls_azurekeyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvault-damg7370.vault.azure.net/"
		},
		"ls_snowflake_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().database}"
		},
		"ls_snowflake_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "@{linkedService().role}"
		},
		"ls_snowflake_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().host}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_azureblobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('ls_azureblobstorage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azureblobstorage_sas')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('ls_azureblobstorage_sas_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azurekeyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_azurekeyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/spl_ds_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azureblobstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azureblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/spl_ds_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azureblobstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azureblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"database": {
						"type": "string",
						"defaultValue": "SPL_DB"
					},
					"warehouse": {
						"type": "string",
						"defaultValue": "SPL_WH"
					},
					"username": {
						"type": "string",
						"defaultValue": "SPL_USER"
					},
					"role": {
						"type": "string",
						"defaultValue": "SPL_ROLE"
					},
					"host": {
						"type": "string",
						"defaultValue": "MIMFSEY-HZ22766.snowflakecomputing.com"
					},
					"account": {
						"type": "string",
						"defaultValue": "MIMFSEY-HZ22766"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "@{linkedService().account}",
					"user": "@{linkedService().username}",
					"database": "[parameters('ls_snowflake_properties_typeProperties_database')]",
					"warehouse": "@{linkedService().warehouse}",
					"role": "[parameters('ls_snowflake_properties_typeProperties_role')]",
					"host": "[parameters('ls_snowflake_properties_typeProperties_host')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_azurekeyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "seattle-pet-license-snowflake"
					}
				},
				"version": "1.1"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azurekeyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/spl_ds_snowflake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference",
					"parameters": {
						"database": "SPL_DB",
						"warehouse": "SPL_WH",
						"username": "SPL_USER",
						"role": "SPL_ROLE",
						"host": "MIMFSEY-HZ22766.snowflakecomputing.com",
						"account": "MIMFSEY-HZ22766"
					}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_Snowflake_STAGE_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spl_ds_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "spl_ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "sinkSnowflakeSTAGE"
						}
					],
					"transformations": [
						{
							"name": "addAuditColumns"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceParquet",
						"sourceParquet derive(DI_CREATED_DT = currentTimestamp(),",
						"          DI_CREATED_BY = 'ADF_PIPELINE') ~> addAuditColumns",
						"addAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sinkSnowflakeSTAGE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/spl_ds_parquet')]",
				"[concat(variables('factoryId'), '/datasets/spl_ds_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transform_LOCATION_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spl_ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "sourceLocation"
						},
						{
							"dataset": {
								"referenceName": "spl_ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "spl_ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "sinkLocation"
						}
					],
					"transformations": [
						{
							"name": "join"
						},
						{
							"name": "LocationKey"
						},
						{
							"name": "RowChanges"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StateFIPS as string,",
						"          State as string,",
						"          State_ABBR as string,",
						"          ZipCode as string,",
						"          County as string,",
						"          City as string,",
						"          DI_CREATED_DT as timestamp,",
						"          DI_CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocation",
						"source(output(",
						"          LOCATION_KEY as decimal(38,0),",
						"          ZIP_CODE as string,",
						"          CITY as string,",
						"          COUNTY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          STATE_FIPS as string,",
						"          DATE_TO_WAREHOUSE as timestamp,",
						"          SOURCE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocationDIM",
						"sourceLocation, sourceLocationDIM join(ZipCode == ZIP_CODE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join keyGenerate(output(Location_Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> LocationKey",
						"LocationKey alterRow(updateIf(ZipCode == ZIP_CODE ),",
						"     insertIf(iifNull(sourceLocationDIM@LOCATION_KEY, 0, sourceLocationDIM@LOCATION_KEY) == 0)) ~> RowChanges",
						"RowChanges sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_KEY = LocationKey@Location_Key,",
						"          STATE_FIPS = StateFIPS,",
						"          STATE = sourceLocation@State,",
						"          STATE_ABBR = sourceLocation@State_ABBR,",
						"          ZIP_CODE = ZipCode,",
						"          COUNTY = sourceLocation@County,",
						"          CITY = sourceLocation@City,",
						"          DATE_TO_WAREHOUSE = DI_CREATED_DT,",
						"          SOURCE_ID = DI_CREATED_BY",
						"     )) ~> sinkLocation"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/spl_ds_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/extract_SPLcsv_PL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSVtoParquet_SPL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License Issue Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "License_Issue_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "License Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "License_Number",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Animal's Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Animals_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Primary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Primary_Breed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Secondary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Secondary_Breed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ZIP Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "spl_ds_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.src_directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(\n    pipeline().parameters.spl_file,\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "spl_ds_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sink_directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(\n    pipeline().parameters.spl_parquet,\n    '.parquet'\n)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CSVtoParquet_GEO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CSVtoParquet_SPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "state_fips",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StateFIPS",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "state_abbr",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State_ABBR",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "zipcode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "county",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "County",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "spl_ds_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.src_directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(\n    pipeline().parameters.loc_file,\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "spl_ds_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sink_directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(\n    pipeline().parameters.loc_parquet,\n    '.parquet'\n)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Parquet_to_Snowflake_STAGE",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CSVtoParquet_GEO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.stage_array",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "stage_Snowflake_STAGE_DF",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "stage_Snowflake_STAGE_DF",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"sourceParquet": {
													"container": {
														"value": "@pipeline().parameters.container",
														"type": "Expression"
													},
													"directory": {
														"value": "@pipeline().parameters.sink_directory",
														"type": "Expression"
													},
													"filename": {
														"value": "@concat(\n    item(),\n    '.parquet'\n)",
														"type": "Expression"
													}
												},
												"sinkSnowflakeSTAGE": {
													"schema_name": {
														"value": "@pipeline().parameters.stage_schema",
														"type": "Expression"
													},
													"table_name": {
														"value": "@toUpper(\n    item()\n)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "transform_LOCATION_DF",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Parquet_to_Snowflake_STAGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transform_LOCATION_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceLocation": {
										"schema_name": {
											"value": "@pipeline().parameters.stage_schema",
											"type": "Expression"
										},
										"table_name": {
											"value": "@pipeline().parameters.loc_parquet",
											"type": "Expression"
										}
									},
									"sourceLocationDIM": {
										"schema_name": {
											"value": "@pipeline().parameters.wh_schema",
											"type": "Expression"
										},
										"table_name": {
											"value": "@pipeline().parameters.wh_loc_dim",
											"type": "Expression"
										}
									},
									"sinkLocation": {
										"schema_name": {
											"value": "@pipeline().parameters.wh_schema",
											"type": "Expression"
										},
										"table_name": {
											"value": "@pipeline().parameters.wh_loc_dim",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "String",
						"defaultValue": "seattlepetlicensecsv"
					},
					"src_directory": {
						"type": "String",
						"defaultValue": "csv"
					},
					"sink_directory": {
						"type": "String",
						"defaultValue": "parquet"
					},
					"spl_file": {
						"type": "string",
						"defaultValue": "Seattle_Pet_Licenses"
					},
					"loc_file": {
						"type": "string",
						"defaultValue": "geo-data"
					},
					"spl_parquet": {
						"type": "string",
						"defaultValue": "STG_PET_LICENSE"
					},
					"loc_parquet": {
						"type": "string",
						"defaultValue": "STG_LOCATION"
					},
					"stage_array": {
						"type": "array",
						"defaultValue": [
							"STG_PET_LICENSE",
							"STG_LOCATION"
						]
					},
					"stage_schema": {
						"type": "string",
						"defaultValue": "STAGE"
					},
					"wh_schema": {
						"type": "string",
						"defaultValue": "DW"
					},
					"wh_loc_dim": {
						"type": "string",
						"defaultValue": "DIM_LOCATION"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/spl_ds_csv')]",
				"[concat(variables('factoryId'), '/datasets/spl_ds_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/transform_LOCATION_DF')]",
				"[concat(variables('factoryId'), '/dataflows/stage_Snowflake_STAGE_DF')]"
			]
		}
	]
}